// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

use utils::primes;

fn answer() -> u32 {
  let target: u32 = 500;
  let mut last_triangle: u32 = 0;

  let mut term: u32 = 1;
  loop {
    let triangle = last_triangle + term;

    let divisors: u32 = primes::prime_factors_hm(triangle as usize)
      .values()
      .fold(1, |d, &exp| d * (exp + 1));

    // println!("{} -> {}", &triangle, &divisors);
    last_triangle = triangle;
    if divisors > target {
      break;
    } else {
      term += 1;
    }
  }

  println!(
    "What is the value of the first triangle number to have over {} divisors?",
    target
  );
  println!("term: {}    value: {}", term, last_triangle);

  last_triangle
}

fn main() {
  let a = answer();
  println!("\nAnswer: {}\n", &a);
}

////////////////////////////////////////////////////////////

#[cfg(test)]
mod e012_tests {
  use super::*;

  #[test]
  fn check_answer() {
    let expected = 76576500;
    assert_eq!(expected, answer());
  }
}
