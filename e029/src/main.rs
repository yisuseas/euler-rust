//! Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
//!     2^2=4,     2^3=8,      2^4=16,     2^5=32
//!     3^2=9,     3^3=27,     3^4=81,     3^5=243
//!     4^2=16,    4^3=64,     4^4=256,    4^5=1024
//!     5^2=25,    5^3=125,    5^4=625,    5^5=3125
//! If they are then placed in numerical order, with any repeats removed,
//! we get the following sequence of 15 distinct terms:
//!     4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
//! How many distinct terms are in the sequence generated by
//! a^b for 2 <= a <= 100 and 2 <= b <= 100?

fn answer() -> usize {
  let mut distinct_terms = vec![];

  let target: i32 = 100;
  for a in 2..=target {
    for b in 2..=target {
      let a_pow_b = (a as f64).powi(b);
      if !distinct_terms.contains(&a_pow_b) {
        distinct_terms.push(a_pow_b);
      }
    }
  }

  println!("How many distinct terms are in the sequence generated by");
  println!("a^b for 2 <= a <= {0} and 2 <= b <= {0} ?", &target);

  distinct_terms.len()
}

fn main() {
  let a = answer();
  println!("\nAnswer: {}\n", &a);
}

////////////////////////////////////////////////////////////

#[cfg(test)]
mod e029_tests {
  use super::*;

  #[test]
  fn check_answer() {
    let expected = 9_183;
    assert_eq!(expected, answer());
  }
}
